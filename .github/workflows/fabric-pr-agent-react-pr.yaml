name: Fabric Pattern Processing using ReAct PR Agent 
on:
  pull_request_review_comment:
    types: [created, edited]
  issue_comment:
    types: [created, edited]

# &&
#       startsWith(github.event.comment.body, '/fabric') &&
#       (github.event.issue.pull_request || github.event_name == 'pull_request_review_comment') &&
#       github.event.pull_request.head.repo.full_name == github.repository

jobs:
  process_fabric:
    if: >
      github.event.comment.user.login == github.event.repository.owner.login 
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Input
        uses: actions/github-script@v7
        id: prepare-input
        with:
          script: |
            let pr, comment, comments;
            const isPRReviewComment = context.eventName === 'pull_request_review_comment';
            
            if (isPRReviewComment) {
              // Handle PR review comments
              pr = await github.rest.pulls.get({
                pull_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              comment = context.payload.comment;
              
              // Get all review comments
              comments = await github.rest.pulls.listReviewComments({
                pull_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
            } else {
              // Handle PR comments
              pr = await github.rest.pulls.get({
                pull_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              comment = await github.rest.issues.getComment({
                comment_id: context.payload.comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              // Get all PR comments
              comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });
            }

            // Get git diff
            const diff = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: isPRReviewComment ? context.payload.pull_request.number : context.issue.number,
              mediaType: {
                format: 'diff'
              }
            });

            // Extract command from the triggering comment
            const command = isPRReviewComment ? comment.body : comment.data.body;

            let output = `INSTRUCTION:\n${command}\n\n`;
            
            // Add PR information
            output += `GITHUB PULL REQUEST, NR: ${pr.data.number}, AUTHOR: ${pr.data.user.login}, TITLE: ${pr.data.title}\n`;
            output += `${pr.data.body}\n\n`;

            // Add git diff
            output += `GIT DIFF:\n${diff.data}\n\n`;

            // Add all comments that came before the triggering comment
            const commentsList = isPRReviewComment ? comments.data : comments.data;
            for (const c of commentsList) {
              if (c.id === (isPRReviewComment ? comment.id : comment.data.id)) {
                break;
              }
              output += `PULL REQUEST COMMENT, ID: ${c.id}, AUTHOR: ${c.user.login}\n`;
              output += `${c.body}\n\n`;
            }

            require('fs').writeFileSync('fabric_input.md', output);

            return output;

      - name: Execute Fabric Patterns
        uses: docker://ghcr.io/xvnpw/fabric-agent-action:v0.0.28
        with:
          input_file: "fabric_input.md"
          output_file: "fabric_output.md"
          agent_type: "react_pr"
          fabric_temperature: 0.2
          fabric_patterns_included: "clean_text,create_stride_threat_model,create_design_document,review_design,refine_design_document,create_threat_scenarios,improve_writing,create_quiz,create_summary"
          debug: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          LANGCHAIN_TRACING_V2: true

      - name: Post Results
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body-path: fabric_output.md